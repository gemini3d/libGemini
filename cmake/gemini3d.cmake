# consumes Gemini3D as ExternalProject
include(ExternalProject)

if(NOT GEMINI_ROOT)
  if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
    set(GEMINI_ROOT ${PROJECT_BINARY_DIR} CACHE PATH "default ROOT")
  else()
    set(GEMINI_ROOT ${CMAKE_INSTALL_PREFIX})
  endif()
endif()

set(GEMINI_LIBRARIES
${GEMINI_ROOT}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}gemini3d${CMAKE_STATIC_LIBRARY_SUFFIX})

set(GEMINI_INCLUDE_DIRS ${GEMINI_ROOT}/include)

ExternalProject_Add(GEMINI3D
GIT_REPOSITORY ${gemini3d_git}
GIT_TAG ${gemini3d_tag}
CMAKE_ARGS -DCMAKE_INSTALL_PREFIX:PATH=${GEMINI_ROOT} -DBUILD_SHARED_LIBS:BOOL=false -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING:BOOL=false
BUILD_BYPRODUCTS ${GEMINI_LIBRARIES}
INACTIVITY_TIMEOUT 15
CONFIGURE_HANDLED_BY_BUILD true)

file(MAKE_DIRECTORY ${GEMINI_INCLUDE_DIRS})
# avoid generate race condition

# libraries needed by Gemini3D
set(h5fortran_LIBRARIES
${GEMINI_ROOT}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}h5fortran${CMAKE_STATIC_LIBRARY_SUFFIX}
)

set(nc4fortran_LIBRARIES
${GEMINI_ROOT}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}nc4fortran${CMAKE_STATIC_LIBRARY_SUFFIX}
)

set(MSIS_LIBRARIES
${GEMINI_ROOT}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}msis00mod${CMAKE_STATIC_LIBRARY_SUFFIX}
)

set(GLOW_LIBRARIES
${GEMINI_ROOT}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}glow${CMAKE_STATIC_LIBRARY_SUFFIX}
)

set(HWM_LIBRARIES
${GEMINI_ROOT}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}hwm_ifc${CMAKE_STATIC_LIBRARY_SUFFIX}
)

set(HWLOC_LIBRARIES
${GEMINI_ROOT}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}hwloc_ifc${CMAKE_STATIC_LIBRARY_SUFFIX}
${GEMINI_ROOT}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}hwloc_c${CMAKE_STATIC_LIBRARY_SUFFIX}
)

# these are available if Gemini3D auto-built them.
set(MUMPS_LIBRARIES
${GEMINI_ROOT}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}dmumps${CMAKE_STATIC_LIBRARY_SUFFIX}
${GEMINI_ROOT}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}mumps_common${CMAKE_STATIC_LIBRARY_SUFFIX}
${GEMINI_ROOT}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}pord${CMAKE_STATIC_LIBRARY_SUFFIX}
)

set(SCALAPACK_LIBRARIES
${GEMINI_ROOT}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}scalapack${CMAKE_STATIC_LIBRARY_SUFFIX}
)


# target_link_libraries(... gemini3d::gemini3d)
# for user programs
add_library(gemini3d::gemini3d INTERFACE IMPORTED)

target_link_libraries(gemini3d::gemini3d INTERFACE
  ${GEMINI_LIBRARIES}
  ${nc4fortran_LIBRARIES}
  ${h5fortran_LIBRARIES}
  ${GLOW_LIBRARIES}
  ${MSIS_LIBRARIES}
  ${HWM_LIBRARIES}
  ${HWLOC_LIBRARIES}
)

target_include_directories(gemini3d::gemini3d INTERFACE ${GEMINI_INCLUDE_DIRS})

add_dependencies(gemini3d::gemini3d GEMINI3D)
